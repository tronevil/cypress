{"version":3,"file":"utils.js","names":["LabelName","Status","extractMetadataFromString","getMessageAndTraceFromError","getStatusFromError","ALLURE_REPORT_STEP_COMMAND","ALLURE_REPORT_SYSTEM_HOOK","getAllureTestPlan","getProjectDir","DEFAULT_RUNTIME_CONFIG","stepsFromCommands","maxArgumentLength","maxArgumentDepth","uint8ArrayToBase64","data","u8arrayLike","Array","isArray","buffer","btoa","String","fromCharCode","apply","getSuites","test","suites","s","parent","push","reverse","getSuitePath","filter","title","map","shouldCommandBeSkipped","command","_last","last","attributes","args","log","name","toReversed","arr","result","i","length","resolveSpecRelativePath","spec","projectDir","specPath","absolute","substring","relative","win","Cypress","platform","replaceAll","getNamesAndLabels","rawName","cleanTitle","labels","titlePath","slice","fullNameSuffix","concat","join","getTestStartData","_test$wallClockStarte","_objectSpread","start","wallClockStartedAt","getTime","Date","now","getTestStopData","_test$duration","_retries","duration","retries","getTestSkipData","statusDetails","message","applyTestPlan","root","testPlan","suite","iterateSuites","indicesToRemove","getIndicesOfDeselectedTests","tests","removeSortedIndices","resolveStatusWithDetails","error","status","PASSED","testReportedKey","Symbol","markTestAsReported","isTestReported","suiteStack","pop","iterateTests","isAllureHook","hook","includes","isRootAfterAllHook","hookName","includedInTestPlan","fullName","allureId","some","_test$id","id","toString","selector","forEach","index","_labels$find","find","_ref","ALLURE_ID","value","indices","splice"],"sources":["../../src/utils.ts"],"sourcesContent":["import { LabelName, Status } from \"allure-js-commons\";\nimport { extractMetadataFromString, getMessageAndTraceFromError, getStatusFromError } from \"allure-js-commons/sdk\";\nimport type { TestPlanV1 } from \"allure-js-commons/sdk\";\nimport { ALLURE_REPORT_STEP_COMMAND, ALLURE_REPORT_SYSTEM_HOOK } from \"./model.js\";\nimport type { CypressCommand, CypressHook, CypressSuite, CypressTest } from \"./model.js\";\nimport { getAllureTestPlan, getProjectDir } from \"./state.js\";\n\nexport const DEFAULT_RUNTIME_CONFIG = {\n  stepsFromCommands: {\n    maxArgumentLength: 128,\n    maxArgumentDepth: 3,\n  },\n};\n\nexport const uint8ArrayToBase64 = (data: unknown) => {\n  // @ts-ignore\n  const u8arrayLike = Array.isArray(data) || data.buffer;\n\n  if (!u8arrayLike) {\n    return data as string;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n  return btoa(String.fromCharCode.apply(null, data as number[]));\n};\n\nexport const getSuites = (test: CypressTest) => {\n  const suites: CypressSuite[] = [];\n  for (let s: CypressSuite | undefined = test.parent; s; s = s.parent) {\n    suites.push(s);\n  }\n  suites.reverse();\n  return suites;\n};\n\nexport const getSuitePath = (test: CypressTest): string[] =>\n  getSuites(test)\n    .filter((s) => s.title)\n    .map((s) => s.title);\n\nexport const shouldCommandBeSkipped = (command: CypressCommand) => {\n  if (last(command.attributes.args)?.log === false) {\n    return true;\n  }\n\n  if (command.attributes.name === \"task\" && command.attributes.args[0] === \"reportAllureRuntimeMessages\") {\n    return true;\n  }\n\n  // we don't need to report then commands because it's just a promise handle\n  if (command.attributes.name === \"then\") {\n    return true;\n  }\n\n  // we should skip artificial wrap from allure steps\n  if (command.attributes.name === \"wrap\" && command.attributes.args[0] === ALLURE_REPORT_STEP_COMMAND) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const toReversed = <T = unknown>(arr: T[]): T[] => {\n  const result: T[] = [];\n\n  for (let i = arr.length - 1; i >= 0; i--) {\n    result.push(arr[i]);\n  }\n\n  return result;\n};\n\nexport const last = <T = unknown>(arr: T[]): T | undefined => {\n  return arr[arr.length - 1];\n};\n\nconst resolveSpecRelativePath = (spec: Cypress.Spec) => {\n  const projectDir = getProjectDir();\n  const specPath = projectDir ? spec.absolute.substring(projectDir.length + 1) : spec.relative;\n  const win = Cypress.platform === \"win32\";\n  return win ? specPath.replaceAll(\"\\\\\", \"/\") : specPath;\n};\n\nexport const getNamesAndLabels = (spec: Cypress.Spec, test: CypressTest) => {\n  const rawName = test.title;\n  const { cleanTitle: name, labels } = extractMetadataFromString(rawName);\n  const suites = test.titlePath().slice(0, -1);\n  const fullNameSuffix = `${[...suites, name].join(\" \")}`;\n  return { name, labels, fullNameSuffix };\n};\n\nexport const getTestStartData = (test: CypressTest) => ({\n  ...getNamesAndLabels(Cypress.spec, test),\n  start: test.wallClockStartedAt?.getTime() || Date.now(),\n});\n\nexport const getTestStopData = (test: CypressTest) => ({\n  duration: test.duration ?? 0,\n  retries: (test as any)._retries ?? 0,\n});\n\nexport const getTestSkipData = () => ({\n  statusDetails: { message: \"This is a pending test\" },\n});\n\nexport const applyTestPlan = (spec: Cypress.Spec, root: CypressSuite) => {\n  const testPlan = getAllureTestPlan();\n  if (testPlan) {\n    const specPath = resolveSpecRelativePath(spec);\n    for (const suite of iterateSuites(root)) {\n      const indicesToRemove = getIndicesOfDeselectedTests(testPlan, spec, specPath, suite.tests);\n      removeSortedIndices(suite.tests, indicesToRemove);\n    }\n  }\n};\n\nexport const resolveStatusWithDetails = (error: Error | undefined) =>\n  error\n    ? {\n        status: getStatusFromError(error),\n        statusDetails: getMessageAndTraceFromError(error),\n      }\n    : { status: Status.PASSED };\n\nconst testReportedKey = Symbol(\"The test was reported to Allure\");\n\nexport const markTestAsReported = (test: CypressTest) => {\n  (test as any)[testReportedKey] = true;\n};\n\nexport const isTestReported = (test: CypressTest) => (test as any)[testReportedKey] === true;\n\nexport const iterateSuites = function* (parent: CypressSuite) {\n  const suiteStack: CypressSuite[] = [];\n  for (let s: CypressSuite | undefined = parent; s; s = suiteStack.pop()) {\n    yield s;\n\n    // Pushing in reverse allows us to maintain depth-first pre-order traversal -\n    // the same order as used by Mocha & Cypress.\n    for (let i = s.suites.length - 1; i >= 0; i--) {\n      suiteStack.push(s.suites[i]);\n    }\n  }\n};\n\nexport const iterateTests = function* (parent: CypressSuite) {\n  for (const suite of iterateSuites(parent)) {\n    yield* suite.tests;\n  }\n};\n\nexport const isAllureHook = (hook: CypressHook) => hook.title.includes(ALLURE_REPORT_SYSTEM_HOOK);\n\nexport const isRootAfterAllHook = (hook: CypressHook) => hook.parent!.root && hook.hookName === \"after all\";\n\nconst includedInTestPlan = (testPlan: TestPlanV1, fullName: string, allureId: string | undefined): boolean =>\n  testPlan.tests.some((test) => (allureId && test.id?.toString() === allureId) || test.selector === fullName);\n\nconst getIndicesOfDeselectedTests = (\n  testPlan: TestPlanV1,\n  spec: Cypress.Spec,\n  specPath: string,\n  tests: readonly CypressTest[],\n) => {\n  const indicesToRemove: number[] = [];\n  tests.forEach((test, index) => {\n    const { fullNameSuffix, labels } = getNamesAndLabels(spec, test);\n    const fullName = `${specPath}#${fullNameSuffix}`;\n    const allureId = labels.find(({ name }) => name === LabelName.ALLURE_ID)?.value;\n\n    if (!includedInTestPlan(testPlan, fullName, allureId)) {\n      indicesToRemove.push(index);\n    }\n  });\n  return indicesToRemove;\n};\n\nconst removeSortedIndices = <T>(arr: T[], indices: readonly number[]) => {\n  for (let i = indices.length - 1; i >= 0; i--) {\n    arr.splice(indices[i], 1);\n  }\n};\n"],"mappings":"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","ignoreList":[]}