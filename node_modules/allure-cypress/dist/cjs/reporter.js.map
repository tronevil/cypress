{"version":3,"file":"reporter.js","names":["_allureJsCommons","require","_reporter","_utils","_excluded","_excluded2","_excluded3","_excluded4","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_objectWithoutProperties","i","_objectWithoutPropertiesLoose","n","indexOf","propertyIsEnumerable","call","hasOwnProperty","_classPrivateFieldInitSpec","a","_checkPrivateRedeclaration","set","has","TypeError","_toPropertyKey","value","configurable","writable","_toPrimitive","Symbol","toPrimitive","String","Number","_classPrivateFieldGet","s","get","_assertClassBrand","_endAllSpecs","WeakMap","_applyAllureCypressMessages","_startRun","_startSuite","_pushNewSuiteScope","_stopSuite","_writeLastSuiteScope","_startHook","_stopHook","_startTest","_addNewTestResult","_failHookAndTest","_passTest","_skipTest","_addSkippedTest","_stopTest","_stopExistingTestResult","_startCommand","_stopCommand","_applyRuntimeApiMessages","_emitPreviousTestScope","_resolveRootUuid","_attachSpecVideo","_emitRemainingScopes","_initializeSpecContext","AllureCypress","constructor","config","undefined","Map","on","reportAllureCypressSpecMessages","args","reportFinalAllureCypressSpecMessages","isInteractive","endSpec","absolutePath","onAfterSpec","onAfterRun","spec","results","_results$video","absolute","video","endRun","allureRuntime","writeEnvironmentInfo","writeCategoriesDefinitions","specAbsolutePath","cypressVideoPath","specContext","specContextByAbsolutePath","delete","_ref","messages","message","type","context","_ref2","data","id","name","root","suiteNames","suiteId","scope","startScope","suiteScopes","suiteIdToScope","suiteScopeToId","_ref3","pop","writeScope","_ref4","scopeType","position","start","isEach","isAfterEach","testScope","last","fixture","startFixture","status","_ref5","duration","fixtureUuid","updateFixture","_fixture$status","Status","PASSED","stopFixture","_ref6","fullNameSuffix","testResultData","test","videoScope","_ref7","scopes","labels","metadataLabels","otherTestData","startTest","stage","Stage","RUNNING","getLanguageLabel","getFrameworkLabel","getSuiteLabels","getEnvironmentLabels","getHostLabel","getThreadLabel","getPackageLabel","specPath","fullName","concat","getPosixPath","_ref8","statusDetails","setError","result","assign","testUuid","updateTest","failed","testResult","_ref9","SKIPPED","_ref10","suites","retries","map","Boolean","writeTest","_ref11","_ref12","parameters","toString","excluded","FINISHED","stopTest","_ref13","rootUuid","stepUuid","startStep","arg","j","commandSteps","_ref14","stop","updateStep","stopStep","applyRuntimeMessages","_context$fixture","shouldVideoBeAttached","videoOnFailOnly","writeAttachment","contentType","ContentType","MP4","getRelativePath","resultsDir","rest","ReporterRuntime","writer","createDefaultWriter","exports","createRuntimeState","allureConfig","getRuntimeConfigDefaults","initialized","testPlan","parseTestPlan","projectDir","getProjectRoot","stepsFromCommands","maxArgumentLength","DEFAULT_RUNTIME_CONFIG","maxArgumentDepth","initializeRuntimeState","cypressConfig","env","allure","allureCypress","hasCypressConfig","allureCypressReporter","attachToCypress"],"sources":["../../src/reporter.ts"],"sourcesContent":["import type Cypress from \"cypress\";\nimport { ContentType, Stage, Status } from \"allure-js-commons\";\nimport type { TestResult } from \"allure-js-commons\";\nimport type { RuntimeMessage } from \"allure-js-commons/sdk\";\nimport {\n  ReporterRuntime,\n  createDefaultWriter,\n  getEnvironmentLabels,\n  getFrameworkLabel,\n  getHostLabel,\n  getLanguageLabel,\n  getPackageLabel,\n  getPosixPath,\n  getProjectRoot,\n  getRelativePath,\n  getSuiteLabels,\n  getThreadLabel,\n  parseTestPlan,\n} from \"allure-js-commons/sdk/reporter\";\nimport type {\n  AllureCypressConfig,\n  AllureCypressTaskArgs,\n  AllureSpecState,\n  CypressCommandEndMessage,\n  CypressCommandStartMessage,\n  CypressFailMessage,\n  CypressHookEndMessage,\n  CypressHookStartMessage,\n  CypressSkippedTestMessage,\n  CypressSuiteEndMessage,\n  CypressSuiteStartMessage,\n  CypressTestEndMessage,\n  CypressTestSkipMessage,\n  CypressTestStartMessage,\n  SpecContext,\n} from \"./model.js\";\nimport { DEFAULT_RUNTIME_CONFIG, last } from \"./utils.js\";\n\nexport class AllureCypress {\n  allureRuntime: ReporterRuntime;\n  specContextByAbsolutePath = new Map<string, SpecContext>();\n  videoOnFailOnly: boolean = false;\n\n  constructor(config: AllureCypressConfig = {}) {\n    const { resultsDir, videoOnFailOnly = false, ...rest } = config;\n\n    this.videoOnFailOnly = videoOnFailOnly;\n    this.allureRuntime = new ReporterRuntime({\n      writer: createDefaultWriter({ resultsDir }),\n      ...rest,\n    });\n  }\n\n  attachToCypress = (on: Cypress.PluginEvents) => {\n    on(\"task\", {\n      reportAllureCypressSpecMessages: (args: AllureCypressTaskArgs) => {\n        this.#applyAllureCypressMessages(args);\n        return null;\n      },\n      reportFinalAllureCypressSpecMessages: (args: AllureCypressTaskArgs) => {\n        this.#applyAllureCypressMessages(args);\n        if (args.isInteractive) {\n          // In non-interactive mode the spec is ended via the 'after:spec' event instead\n          // to get the spec's video.\n          this.endSpec(args.absolutePath);\n        }\n        return null;\n      },\n    });\n\n    // Emits the remaining fixtures and writes the video of the spec.\n    // In interactive mode it's invoked through the `reportFinalAllureCypressSpecMessages` task.\n    on(\"after:spec\", this.onAfterSpec);\n\n    // Emits the categories and env info. Doesn't work in interactive mode unless\n    // `experimentalInteractiveRunEvents` is set.\n    on(\"after:run\", this.onAfterRun);\n  };\n\n  /**\n   * Forward the `after:spec` event into Allure Cypress using this function if\n   * you need to define your own handler or combine Allure Cypress with other\n   * plugins. More info [here](https://github.com/allure-framework/allure-js/blob/main/packages/allure-cypress/README.md#setupnodeevents-limitations).\n   * @param spec The first argument of the `after:spec` event.\n   * @param results The second argument of the `after:spec` event. It's `undefined` in interactive mode.\n   * @example\n   * ```javascript\n   * import { defineConfig } from \"cypress\";\n   * import { allureCypress } from \"allure-cypress/reporter\";\n   *\n   * export default defineConfig({\n   *   setupNodeEvents: (on, config) => {\n   *     const allureReporter = allureCypress(on, config);\n   *     on(\"after:spec\", (spec, results) => {\n   *       allureReporter.onAfterSpec(spec, results);\n   *     });\n   *     return config;\n   *   }\n   *   // ...\n   * });\n   * ```\n   */\n  onAfterSpec = (spec: Cypress.Spec, results: CypressCommandLine.RunResult | undefined) => {\n    this.endSpec(spec.absolute, results?.video ?? undefined);\n  };\n\n  /**\n   * Forward the `after:run` event into Allure Cypress using this function if\n   * you need to define your own handler or combine Allure Cypress with other\n   * plugins. More info [here](https://github.com/allure-framework/allure-js/blob/main/packages/allure-cypress/README.md#setupnodeevents-limitations).\n   * @param results The argument of the `after:run` event. It's `undefined` in interactive mode.\n   * @example\n   * ```javascript\n   * import { defineConfig } from \"cypress\";\n   * import { allureCypress } from \"allure-cypress/reporter\";\n   *\n   * export default defineConfig({\n   *   setupNodeEvents: (on, config) => {\n   *     const allureReporter = allureCypress(on, config);\n   *     on(\"after:run\", (results) => {\n   *       allureReporter.onAfterRun(results);\n   *     });\n   *     return config;\n   *   }\n   *   // ...\n   * });\n   * ```\n   */\n  onAfterRun = (\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    results: CypressCommandLine.CypressFailedRunResult | CypressCommandLine.CypressRunResult | undefined,\n  ) => {\n    this.endRun();\n  };\n\n  endRun = () => {\n    this.#endAllSpecs();\n    this.allureRuntime.writeEnvironmentInfo();\n    this.allureRuntime.writeCategoriesDefinitions();\n  };\n\n  endSpec = (specAbsolutePath: string, cypressVideoPath?: string) => {\n    const specContext = this.specContextByAbsolutePath.get(specAbsolutePath);\n    if (specContext) {\n      this.#attachSpecVideo(specContext, cypressVideoPath);\n      this.#emitRemainingScopes(specContext);\n      this.specContextByAbsolutePath.delete(specAbsolutePath);\n    }\n  };\n\n  #endAllSpecs = () => {\n    for (const specAbsolutePath of this.specContextByAbsolutePath.keys()) {\n      this.endSpec(specAbsolutePath);\n    }\n  };\n\n  #applyAllureCypressMessages = ({ messages, absolutePath }: AllureCypressTaskArgs) => {\n    messages.forEach((message) => {\n      if (message.type === \"cypress_run_start\") {\n        this.#startRun(absolutePath);\n        return;\n      }\n\n      const context = this.specContextByAbsolutePath.get(absolutePath);\n      if (!context) {\n        return;\n      }\n\n      switch (message.type) {\n        case \"cypress_suite_start\":\n          this.#startSuite(context, message);\n          break;\n        case \"cypress_suite_end\":\n          this.#stopSuite(context, message);\n          break;\n        case \"cypress_hook_start\":\n          this.#startHook(context, message);\n          break;\n        case \"cypress_hook_end\":\n          this.#stopHook(context, message);\n          break;\n        case \"cypress_test_start\":\n          this.#startTest(context, message);\n          break;\n        case \"cypress_test_pass\":\n          this.#passTest(context);\n          break;\n        case \"cypress_fail\":\n          this.#failHookAndTest(context, message);\n          break;\n        case \"cypress_test_skip\":\n          this.#skipTest(context, message);\n          break;\n        case \"cypress_skipped_test\":\n          this.#addSkippedTest(context, message);\n          break;\n        case \"cypress_test_end\":\n          this.#stopTest(context, message);\n          break;\n        case \"cypress_command_start\":\n          this.#startCommand(context, message);\n          break;\n        case \"cypress_command_end\":\n          this.#stopCommand(context, message);\n          break;\n        default:\n          this.#applyRuntimeApiMessages(context, message);\n          break;\n      }\n    });\n  };\n\n  #startRun = (absolutePath: string) => {\n    // This function is executed once on `cypress run`, but it can be executed\n    // multiple times during an interactive session (`cypress open`). Ideally,\n    // in that case, we should remove previous result objects that haven't been\n    // written yet, but it would've required support in ReporterRuntime.\n    // Currently, we're discarding the entire spec context.\n    this.#initializeSpecContext(absolutePath);\n  };\n\n  #startSuite = (context: SpecContext, { data: { id, name, root } }: CypressSuiteStartMessage) => {\n    this.#pushNewSuiteScope(context, id);\n    if (!root) {\n      this.#emitPreviousTestScope(context);\n      context.suiteNames.push(name);\n    }\n  };\n\n  #pushNewSuiteScope = (context: SpecContext, suiteId: string) => {\n    const scope = this.allureRuntime.startScope();\n    context.suiteScopes.push(scope);\n    context.suiteIdToScope.set(suiteId, scope);\n    context.suiteScopeToId.set(scope, suiteId);\n    return scope;\n  };\n\n  #stopSuite = (context: SpecContext, { data: { root } }: CypressSuiteEndMessage) => {\n    this.#emitPreviousTestScope(context);\n    if (!root) {\n      context.suiteNames.pop();\n    }\n    this.#writeLastSuiteScope(context);\n  };\n\n  #writeLastSuiteScope = (context: SpecContext) => {\n    const scope = context.suiteScopes.pop();\n    if (scope) {\n      const suiteId = context.suiteScopeToId.get(scope);\n      if (suiteId) {\n        context.suiteScopeToId.delete(scope);\n        context.suiteIdToScope.delete(suiteId);\n      }\n      this.allureRuntime.writeScope(scope);\n    }\n  };\n\n  #startHook = (context: SpecContext, { data: { name, scopeType, position, start } }: CypressHookStartMessage) => {\n    const isEach = scopeType === \"each\";\n    const isAfterEach = position === \"after\" && isEach;\n    if (!isAfterEach) {\n      this.#emitPreviousTestScope(context);\n    }\n\n    const scope = isEach ? context.testScope : last(context.suiteScopes);\n    if (scope) {\n      context.fixture = this.allureRuntime.startFixture(scope, position, {\n        name,\n        start,\n        status: undefined,\n      });\n    }\n  };\n\n  #stopHook = (context: SpecContext, { data: { duration } }: CypressHookEndMessage) => {\n    const fixtureUuid = context.fixture;\n    if (fixtureUuid) {\n      this.allureRuntime.updateFixture(fixtureUuid, (fixture) => {\n        fixture.status ??= Status.PASSED;\n      });\n      this.allureRuntime.stopFixture(fixtureUuid, { duration });\n      context.fixture = undefined;\n    }\n  };\n\n  #startTest = (context: SpecContext, { data: { fullNameSuffix, ...testResultData } }: CypressTestStartMessage) => {\n    this.#emitPreviousTestScope(context);\n    const testScope = this.allureRuntime.startScope();\n    context.testScope = testScope;\n    context.test = this.#addNewTestResult(context, fullNameSuffix, testResultData, [\n      context.videoScope,\n      ...context.suiteScopes,\n      testScope,\n    ]);\n  };\n\n  #addNewTestResult = (\n    context: SpecContext,\n    fullNameSuffix: string,\n    { labels: metadataLabels = [], ...otherTestData }: Partial<TestResult>,\n    scopes: string[],\n  ) =>\n    this.allureRuntime.startTest(\n      {\n        stage: Stage.RUNNING,\n        labels: [\n          getLanguageLabel(),\n          getFrameworkLabel(\"cypress\"),\n          ...getSuiteLabels(context.suiteNames),\n          ...metadataLabels,\n          ...getEnvironmentLabels(),\n          getHostLabel(),\n          getThreadLabel(),\n          getPackageLabel(context.specPath),\n        ],\n        fullName: `${getPosixPath(context.specPath)}#${fullNameSuffix}`,\n        ...otherTestData,\n      },\n      scopes,\n    );\n\n  #failHookAndTest = (context: SpecContext, { data: { status, statusDetails } }: CypressFailMessage) => {\n    const setError = (result: object) => Object.assign(result, { status, statusDetails });\n\n    const fixtureUuid = context.fixture;\n    if (fixtureUuid) {\n      this.allureRuntime.updateFixture(fixtureUuid, setError);\n    }\n\n    const testUuid = context.test;\n    if (testUuid) {\n      this.allureRuntime.updateTest(testUuid, setError);\n    }\n\n    context.failed = true;\n  };\n\n  #passTest = (context: SpecContext) => {\n    const testUuid = context.test;\n    if (testUuid) {\n      this.allureRuntime.updateTest(testUuid, (testResult) => {\n        testResult.status = Status.PASSED;\n      });\n    }\n  };\n\n  #skipTest = (context: SpecContext, { data: { statusDetails } }: CypressTestSkipMessage) => {\n    const testUuid = context.test;\n    if (testUuid) {\n      this.allureRuntime.updateTest(testUuid, (testResult) => {\n        testResult.status = Status.SKIPPED;\n        if (statusDetails) {\n          testResult.statusDetails = statusDetails;\n        }\n      });\n    }\n  };\n\n  #addSkippedTest = (\n    context: SpecContext,\n    { data: { fullNameSuffix, suites, duration, retries, ...testResultData } }: CypressSkippedTestMessage,\n  ) => {\n    // Tests skipped because of a hook error may share all suites of the current context\n    // or just a part thereof (if it's from a sibling suite).\n    const scopes = suites.map((s) => context.suiteIdToScope.get(s)).filter((s): s is string => Boolean(s));\n\n    const testUuid = this.#addNewTestResult(context, fullNameSuffix, testResultData, [context.videoScope, ...scopes]);\n    this.#stopExistingTestResult(testUuid, { duration, retries });\n    this.allureRuntime.writeTest(testUuid);\n  };\n\n  #stopTest = (context: SpecContext, { data }: CypressTestEndMessage) => {\n    const testUuid = context.test;\n    if (testUuid) {\n      this.#stopExistingTestResult(testUuid, data);\n      this.allureRuntime.writeTest(testUuid);\n      context.test = undefined;\n    }\n  };\n\n  #stopExistingTestResult = (testUuid: string, { retries, duration }: CypressTestEndMessage[\"data\"]) => {\n    this.allureRuntime.updateTest(testUuid, (testResult) => {\n      if (retries > 0) {\n        testResult.parameters.push({\n          name: \"Retry\",\n          value: retries.toString(),\n          excluded: true,\n        });\n      }\n      testResult.stage = Stage.FINISHED;\n    });\n    this.allureRuntime.stopTest(testUuid, { duration });\n  };\n\n  #startCommand = (context: SpecContext, { data: { name, args } }: CypressCommandStartMessage) => {\n    const rootUuid = this.#resolveRootUuid(context);\n    if (rootUuid) {\n      const stepUuid = this.allureRuntime.startStep(rootUuid, undefined, {\n        name,\n        parameters: args.map((arg, j) => ({\n          name: `Argument [${j}]`,\n          value: arg,\n        })),\n      });\n      if (stepUuid) {\n        context.commandSteps.push(stepUuid);\n      }\n    }\n  };\n\n  #stopCommand = (context: SpecContext, { data: { status, statusDetails, stop } }: CypressCommandEndMessage) => {\n    const stepUuid = context.commandSteps.pop();\n    if (stepUuid) {\n      this.allureRuntime.updateStep(stepUuid, (r) => {\n        r.status = status;\n\n        if (statusDetails) {\n          r.statusDetails = statusDetails;\n        }\n      });\n      this.allureRuntime.stopStep(stepUuid, { stop });\n    }\n  };\n\n  #applyRuntimeApiMessages = (context: SpecContext, message: RuntimeMessage) => {\n    const rootUuid = this.#resolveRootUuid(context);\n    if (rootUuid) {\n      this.allureRuntime.applyRuntimeMessages(rootUuid, [message]);\n    }\n  };\n\n  /**\n   * We must defer emitting a test's scope until we receive all the test's `afterEach` hooks.\n   * At the same time, we should report it as early as we can. That means we should call this\n   * method in the following cases:\n   * - when an `after` hook of the test starts (`after` hooks are called later than `afterEach`)\n   * - when a `before` or `beforeEach` hook of the next test starts (in case the next test has `before`/`beforeEach` hooks)\n   * - when the next test starts (in case the next test doesn't have `before`/`beforeEach` hooks)\n   * - when the test's suite ends (in case the test is the last one in its suite, including the root suite of the spec)\n   * - when a nested suite starts\n   * - when the spec ends\n   */\n  #emitPreviousTestScope = (context: SpecContext) => {\n    const testScope = context.testScope;\n\n    // Checking the test allows us to tell `beforeEach` and `afterEach` apart.\n    // Here we're interested in `afterEach` only.\n    if (!context.test && testScope) {\n      this.allureRuntime.writeScope(testScope);\n      context.testScope = undefined;\n    }\n  };\n\n  #resolveRootUuid = (context: SpecContext) => context.fixture ?? context.test;\n\n  #attachSpecVideo = (context: SpecContext, cypressVideoPath?: string) => {\n    const shouldVideoBeAttached = (!this.videoOnFailOnly || context.failed) && cypressVideoPath;\n    if (shouldVideoBeAttached) {\n      const fixtureUuid = this.allureRuntime.startFixture(context.videoScope, \"after\", {\n        name: \"Cypress video\",\n        status: Status.PASSED,\n        stage: Stage.FINISHED,\n      })!;\n      this.allureRuntime.writeAttachment(fixtureUuid, undefined, \"Cypress video\", cypressVideoPath, {\n        contentType: ContentType.MP4,\n      });\n      this.allureRuntime.stopFixture(fixtureUuid);\n      this.allureRuntime.writeScope(context.videoScope);\n    }\n  };\n\n  #emitRemainingScopes = (context: SpecContext) => {\n    this.#emitPreviousTestScope(context);\n    context.suiteScopes.forEach((scope) => {\n      this.allureRuntime.writeScope(scope);\n    });\n  };\n\n  #initializeSpecContext = (absolutePath: string) => {\n    const specPath = getRelativePath(absolutePath);\n    const context: SpecContext = {\n      specPath,\n      test: undefined,\n      fixture: undefined,\n      commandSteps: [],\n      videoScope: this.allureRuntime.startScope(),\n      suiteIdToScope: new Map(),\n      suiteScopeToId: new Map(),\n      suiteScopes: [],\n      testScope: undefined,\n      suiteNames: [],\n      failed: false,\n    };\n    this.specContextByAbsolutePath.set(absolutePath, context);\n  };\n}\n\nconst createRuntimeState = (allureConfig?: AllureCypressConfig): AllureSpecState => ({\n  config: getRuntimeConfigDefaults(allureConfig),\n  initialized: false,\n  messages: [],\n  testPlan: parseTestPlan(),\n  projectDir: getProjectRoot(),\n});\n\nconst getRuntimeConfigDefaults = ({\n  stepsFromCommands: {\n    maxArgumentLength = DEFAULT_RUNTIME_CONFIG.stepsFromCommands.maxArgumentLength,\n    maxArgumentDepth = DEFAULT_RUNTIME_CONFIG.stepsFromCommands.maxArgumentDepth,\n  } = DEFAULT_RUNTIME_CONFIG.stepsFromCommands,\n}: AllureCypressConfig = DEFAULT_RUNTIME_CONFIG): AllureSpecState[\"config\"] => ({\n  stepsFromCommands: {\n    maxArgumentDepth,\n    maxArgumentLength,\n  },\n});\n\nconst initializeRuntimeState = (cypressConfig: Cypress.PluginConfigOptions, allureConfig?: AllureCypressConfig) => {\n  cypressConfig.env.allure = createRuntimeState(allureConfig);\n  return cypressConfig;\n};\n\n/**\n * Sets up Allure Cypress.\n * @param on The function used to subscribe to Cypress Node events (it's the first argument of `setupNodeEvents`).\n * @param cypressConfig The Cypress configuration (the second argument of `setupNodeEvents`). If provided, the selective run feature will be enabled.\n * @param allureConfig An Allure configuration object (optional).\n * @example\n * ```javascript\n * import { defineConfig } from \"cypress\";\n * import { allureCypress } from \"allure-cypress/reporter\";\n *\n * export default defineConfig({\n *   e2e: {\n *     setupNodeEvents: (on, config) => {\n *       allureCypress(on, config, { videoOnFailOnly: true });\n *       return config;\n *     },\n *     // ...\n *   }\n * });\n * ```\n */\nexport const allureCypress = (\n  on: Cypress.PluginEvents,\n  cypressConfig?: Cypress.PluginConfigOptions,\n  allureConfig?: AllureCypressConfig,\n) => {\n  // Backward compatibility; mainly for JS users who have no type hints\n  if (!allureConfig && cypressConfig && !(\"env\" in cypressConfig)) {\n    allureConfig = cypressConfig as AllureCypressConfig;\n  }\n\n  const hasCypressConfig = cypressConfig && \"env\" in cypressConfig;\n\n  const allureCypressReporter = new AllureCypress(allureConfig);\n  allureCypressReporter.attachToCypress(on);\n\n  if (hasCypressConfig) {\n    initializeRuntimeState(cypressConfig, allureConfig);\n  }\n\n  return allureCypressReporter;\n};\n"],"mappings":"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","ignoreList":[]}