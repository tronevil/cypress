{"version":3,"file":"state.js","names":["_utils","require","getAllureState","state","Cypress","env","config","DEFAULT_RUNTIME_CONFIG","initialized","messages","testPlan","undefined","currentTest","projectDir","exports","isAllureInitialized","setAllureInitialized","getRuntimeMessages","setRuntimeMessages","value","enqueueRuntimeMessage","message","push","getAllureTestPlan","getProjectDir","getCurrentTest","setCurrentTest","test","dropCurrentTest","getConfig"],"sources":["../../src/state.ts"],"sourcesContent":["import type { AllureSpecState, CypressMessage, CypressTest } from \"./model.js\";\nimport { DEFAULT_RUNTIME_CONFIG } from \"./utils.js\";\n\nexport const getAllureState = () => {\n  let state = Cypress.env(\"allure\") as AllureSpecState;\n  if (!state) {\n    state = {\n      config: DEFAULT_RUNTIME_CONFIG,\n      initialized: false,\n      messages: [],\n      testPlan: undefined,\n      currentTest: undefined,\n      projectDir: undefined,\n    };\n    Cypress.env(\"allure\", state);\n  }\n  return state;\n};\n\nexport const isAllureInitialized = () => getAllureState().initialized;\n\nexport const setAllureInitialized = () => {\n  getAllureState().initialized = true;\n};\n\nexport const getRuntimeMessages = () => getAllureState().messages;\n\nexport const setRuntimeMessages = (value: CypressMessage[]) => {\n  getAllureState().messages = value;\n};\n\nexport const enqueueRuntimeMessage = (message: CypressMessage) => {\n  getRuntimeMessages().push(message);\n};\n\nexport const getAllureTestPlan = () => getAllureState().testPlan;\n\nexport const getProjectDir = () => getAllureState().projectDir;\n\nexport const getCurrentTest = () => getAllureState().currentTest;\n\nexport const setCurrentTest = (test: CypressTest) => {\n  getAllureState().currentTest = test;\n};\n\nexport const dropCurrentTest = () => {\n  getAllureState().currentTest = undefined;\n};\n\nexport const getConfig = () => getAllureState().config;\n"],"mappings":";;;;;;AACA,IAAAA,MAAA,GAAAC,OAAA;AAEO,IAAMC,cAAc,GAAGA,CAAA,KAAM;EAClC,IAAIC,KAAK,GAAGC,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAoB;EACpD,IAAI,CAACF,KAAK,EAAE;IACVA,KAAK,GAAG;MACNG,MAAM,EAAEC,6BAAsB;MAC9BC,WAAW,EAAE,KAAK;MAClBC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAEC,SAAS;MACnBC,WAAW,EAAED,SAAS;MACtBE,UAAU,EAAEF;IACd,CAAC;IACDP,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEF,KAAK,CAAC;EAC9B;EACA,OAAOA,KAAK;AACd,CAAC;AAACW,OAAA,CAAAZ,cAAA,GAAAA,cAAA;AAEK,IAAMa,mBAAmB,GAAGA,CAAA,KAAMb,cAAc,CAAC,CAAC,CAACM,WAAW;AAACM,OAAA,CAAAC,mBAAA,GAAAA,mBAAA;AAE/D,IAAMC,oBAAoB,GAAGA,CAAA,KAAM;EACxCd,cAAc,CAAC,CAAC,CAACM,WAAW,GAAG,IAAI;AACrC,CAAC;AAACM,OAAA,CAAAE,oBAAA,GAAAA,oBAAA;AAEK,IAAMC,kBAAkB,GAAGA,CAAA,KAAMf,cAAc,CAAC,CAAC,CAACO,QAAQ;AAACK,OAAA,CAAAG,kBAAA,GAAAA,kBAAA;AAE3D,IAAMC,kBAAkB,GAAIC,KAAuB,IAAK;EAC7DjB,cAAc,CAAC,CAAC,CAACO,QAAQ,GAAGU,KAAK;AACnC,CAAC;AAACL,OAAA,CAAAI,kBAAA,GAAAA,kBAAA;AAEK,IAAME,qBAAqB,GAAIC,OAAuB,IAAK;EAChEJ,kBAAkB,CAAC,CAAC,CAACK,IAAI,CAACD,OAAO,CAAC;AACpC,CAAC;AAACP,OAAA,CAAAM,qBAAA,GAAAA,qBAAA;AAEK,IAAMG,iBAAiB,GAAGA,CAAA,KAAMrB,cAAc,CAAC,CAAC,CAACQ,QAAQ;AAACI,OAAA,CAAAS,iBAAA,GAAAA,iBAAA;AAE1D,IAAMC,aAAa,GAAGA,CAAA,KAAMtB,cAAc,CAAC,CAAC,CAACW,UAAU;AAACC,OAAA,CAAAU,aAAA,GAAAA,aAAA;AAExD,IAAMC,cAAc,GAAGA,CAAA,KAAMvB,cAAc,CAAC,CAAC,CAACU,WAAW;AAACE,OAAA,CAAAW,cAAA,GAAAA,cAAA;AAE1D,IAAMC,cAAc,GAAIC,IAAiB,IAAK;EACnDzB,cAAc,CAAC,CAAC,CAACU,WAAW,GAAGe,IAAI;AACrC,CAAC;AAACb,OAAA,CAAAY,cAAA,GAAAA,cAAA;AAEK,IAAME,eAAe,GAAGA,CAAA,KAAM;EACnC1B,cAAc,CAAC,CAAC,CAACU,WAAW,GAAGD,SAAS;AAC1C,CAAC;AAACG,OAAA,CAAAc,eAAA,GAAAA,eAAA;AAEK,IAAMC,SAAS,GAAGA,CAAA,KAAM3B,cAAc,CAAC,CAAC,CAACI,MAAM;AAACQ,OAAA,CAAAe,SAAA,GAAAA,SAAA","ignoreList":[]}